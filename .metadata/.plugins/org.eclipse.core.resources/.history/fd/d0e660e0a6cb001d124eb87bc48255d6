package graphics;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.StringWriter;
import java.util.logging.Logger;

import data.BooleanMatrix;
import random.RandomUtil;

public class TwoColorImageUtil {
	private static Logger logger = Logger.getLogger(TwoColorImageUtil.class.getName());
	
	public static void renderToGraphics2D(TwoColorImage twoColorImage, Graphics2D graphics2D) {
		BooleanMatrix pixels = twoColorImage.getPixels();
		
		Color highlight = Color.CYAN;
		Color fill = Color.BLACK;
		
		for (int y=0; y<pixels.getHeight(); y++) {
			for (int x=0; x<pixels.getWidth(); x++) {
				if (pixels.getElement(x, y)) {
					graphics2D.setColor(highlight);		
				} else {
					graphics2D.setColor(fill);
				}
				graphics2D.drawLine(x, y, x, y);
			}
		}
	}
	
	public static void renderToGraphics2DTransparent(TwoColorImage twoColorImage, Graphics2D graphics2D) {
		BooleanMatrix pixels = twoColorImage.getPixels();
		
		Color highlight = Color.RED;
		
		graphics2D.setColor(highlight);	
		for (int y=0; y<pixels.getHeight(); y++) {
			for (int x=0; x<pixels.getWidth(); x++) {
				if (pixels.getElement(x, y)) {
						
					graphics2D.drawLine(x, y, x, y);
				}
			}
		}
	}
	
	
	private static boolean randomizeColor = false;
	
	private static Color getRandomColor() {
		Color highlight;
		int randomColor = RandomUtil.getRandomNumber(0, 3);
		switch (randomColor) {
		case 0:
			highlight = Color.CYAN;
			break;
		case 1:
			highlight = Color.RED;
			break;			
		case 2:
			highlight = Color.GREEN;
			break;
		}
		
		return highlight;
	}
	
	
	public static void renderToGraphics2DTransparentWithXOffset(TwoColorImage twoColorImage, Graphics2D graphics2D, int xOffset) {
		BooleanMatrix pixels = twoColorImage.getPixels();
		
		
		Color highlight = Color.CYAN;

		if (randomizeColor) {
			highlight = getRandomColor();
		}
		
		graphics2D.setColor(highlight);	
		for (int y=0; y<pixels.getHeight(); y++) {
			for (int x=0; x<pixels.getWidth(); x++) {
				if (pixels.getElement(x, y)) {
						
					graphics2D.drawLine(xOffset+x, y, xOffset+x, y);
				}
			}
		}
	}	
	
	public static BufferedImage renderTwoColorImage(TwoColorImage twoColorImage) {
		BufferedImage bufferedImage = new BufferedImage(
				twoColorImage.getWidth(),twoColorImage.getHeight(),BufferedImage.TYPE_INT_RGB);
		Graphics2D graphics2D = bufferedImage.createGraphics();

		renderToGraphics2D(twoColorImage, graphics2D);
		
		return bufferedImage;
	}
	
	public static String renderAscii(TwoColorImage image) {
		BooleanMatrix pixels = image.getPixels();
		final StringWriter stringWriter = new StringWriter();
		for (int y=0; y<pixels.getHeight(); y++) {
			for (int x=0; x<pixels.getWidth(); x++) {
				if (pixels.getElement(x, y)) {
					stringWriter.append("X");
				} else {
					stringWriter.append("0");
				}
			}
			stringWriter.append("\n");
		}
		
		return stringWriter.toString();
	}
	
	public static void main(String args[]) {
		logger.info("Testing Ascii Render");
		
		TwoColorImage image = new TwoColorImage(50,50);
		// image.drawRectangeCoordinates(5, 5, 9, 9);
		image.drawLine(0, 0, 49, 49);		
		image.drawLine(0, 0, 49, 20);
		image.drawLine(0, 0, 49, 10);
		image.drawLine(0, 0, 49, 5);
		image.drawRectangeCoordinates(15, 5, 33, 22);
		image.drawRectangeCoordinates(20, 10, 40, 30);

		
		image.drawLine(15, 5, 20, 10); // LisV
		image.drawLine(33, 5, 40, 10);		
		
		image.drawLine(33, 22, 40, 30);
		image.drawLine(15, 22, 20, 30);
		
		
		System.out.println(renderAscii(image));
	}
}
